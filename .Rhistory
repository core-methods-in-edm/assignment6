}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
#}
View(infobox_table)
View(infobox_table)
#get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html("https://en.wikipedia.org/wiki/Susan_Collins")
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
children_entry <- list("key" = "Children",
"value" = NA)
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
#}
get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html("https://en.wikipedia.org/wiki/Susan_Collins")
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
children_entry <- list("key" = "Children",
"value" = NA)
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
}
get_wiki_info("https://en.wikipedia.org/wiki/Tammy_Duckworth")
get_wiki_info("https://en.wikipedia.org/wiki/Susan_Collins")
get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html("https://en.wikipedia.org/wiki/Susan_Collins")
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
children_entry <- list("key" = "Children",
"value" = NA)
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
}
get_wiki_info("https://en.wikipedia.org/wiki/Tammy_Duckworth")
get_wiki_info("https://en.wikipedia.org/wiki/Susan_Collins")
"Children" %in% infobox_table$key
View(infobox_table)
View(infobox_table)
rm(list=ls())
#Import rvest
library(rvest)
#import dplyr
library(dplyr)
#Read the wiki page
McConnell_wiki <- read_html("https://en.wikipedia.org/wiki/Mitch_McConnell")
knitr::include_graphics("images/wiki_infobox.png")
McConnell_infobox <- html_node(McConnell_wiki, css = ".infobox")
McConnell_table <- html_table(McConnell_infobox, header = FALSE)
colnames(McConnell_table) <- c("key", "value")
#Replace First line key with "Full Name"
McConnell_table$key[1] <- "Full Name"
#Filter only the rows we want
McConnell_table_clean <- filter(McConnell_table,
key %in% c("Full Name", "Political party", "Children")
)
#Print DF
McConnell_table_clean
knitr::include_graphics("images/dataframe_McConnell.png")
get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html("https://en.wikipedia.org/wiki/Susan_Collins")
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
children_entry <- list("key" = "Children",
"value" = NA)
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
}
get_wiki_info("https://en.wikipedia.org/wiki/Tammy_Duckworth")
get_wiki_info("https://en.wikipedia.org/wiki/Susan_Collins")
get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html(url)
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
children_entry <- list("key" = "Children",
"value" = NA)
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
}
get_wiki_info("https://en.wikipedia.org/wiki/Tammy_Duckworth")
get_wiki_info("https://en.wikipedia.org/wiki/Susan_Collins")
get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html(url)
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
#Create children entry
children_entry <- list("key" = "Children",
"value" = NA)
#Add children entry to infobox_table
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
}
#Function call for Tammy Duckworth
get_wiki_info("https://en.wikipedia.org/wiki/Tammy_Duckworth")
#Function call for Susan Collins
#Function above has been amended to deal with no entry for children
get_wiki_info("https://en.wikipedia.org/wiki/Susan_Collins")
#Read the wiki page
USSenators_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
#Get HTML for the 'list of senators' box
list_US_Senators <- html_node(USSenators_wiki, xpath = "/html/body/div[3]/div[3]/div[4]/div/table[5]")
#Read the wiki page
USSenators_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
#Get HTML for the 'list of senators' box
list_US_Senators <- html_node(USSenators_wiki, xpath = "/html/body/div[3]/div[3]/div[4]/div/table[5]")
xml_find_all(list_US_Senators,
xpath = '//*[@id="senators"]/tbody//tr/th/span/span/span/a') %>%
xml_attr(., attr = "href")
#Read the wiki page
USSenators_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
#Get HTML for the 'list of senators' box
list_US_Senators <- html_node(USSenators_wiki, xpath = "/html/body/div[3]/div[3]/div[4]/div/table[5]")
list_US_senator_ends <- xml_find_all(list_US_Senators,
xpath = '//*[@id="senators"]/tbody//tr/th/span/span/span/a') %>%
xml_attr(., attr = "href")
#Read the wiki page
USSenators_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
#Get HTML for the 'list of senators' box
list_US_Senators <- html_node(USSenators_wiki, xpath = "/html/body/div[3]/div[3]/div[4]/div/table[5]")
list_US_senator_url_ends <- xml_find_all(list_US_Senators,
xpath = '//*[@id="senators"]/tbody//tr/th/span/span/span/a') %>%
xml_attr(., attr = "href")
#Read the wiki page
USSenators_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
#Get HTML for the 'list of senators' box
list_US_Senators <- html_node(USSenators_wiki, xpath = "/html/body/div[3]/div[3]/div[4]/div/table[5]")
#Get the URL endpoints for each senator
list_US_senator_url_ends <- xml_find_all(list_US_Senators,
xpath = '//*[@id="senators"]/tbody//tr/th/span/span/span/a') %>%
xml_attr(., attr = "href")
#Get vector with the full URLs
US_Senator_wiki_pages <- paste("https://en.wikipedia.org", list_US_senator_url_ends,
sep = "")
US_Senator_wiki_pages
US_Senator_wiki_pages[1]
for (i in seq_along(US_Senator_wiki_pages)) {
#Get senator infobox
#get_wiki_info(senator_page)
print(i)
}
McConnell_table_clean$value[[1]]
McConnell_table_clean$value[[2]]
#Define 3 empty vectors to store our senators' information
full_name <- vector(mode="character", length=100)
political_party <- vector(mode="character", length=100)
no_of_children <- vector(mode="character", length=100)
for (i in seq_along(US_Senator_wiki_pages)) {
#Get senator infobox
senator_infobox <- get_wiki_info(US_Senator_wiki_pages[i])
#Store Senator's full name in full_name vector
full_name[i] <- senator_infobox$value[[1]]
#Store Senator's political affiliation in political_party vector
political_party[i] <- senator_infobox$value[[2]]
#Store Senator's number of children in no_of_children vector
political_party[i] <- senator_infobox$value[[3]]
}
no_of_children
#Define 3 empty vectors to store our senators' information
full_name <- vector(mode="character", length=100)
political_party <- vector(mode="character", length=100)
no_of_children <- vector(mode="character", length=100)
for (i in seq_along(US_Senator_wiki_pages)) {
#Get senator infobox
senator_infobox <- get_wiki_info(US_Senator_wiki_pages[i])
#Store Senator's full name in full_name vector
full_name[i] <- senator_infobox$value[[1]]
#Store Senator's political affiliation in political_party vector
political_party[i] <- senator_infobox$value[[2]]
#Store Senator's number of children in no_of_children vector
no_of_children[i] <- senator_infobox$value[[3]]
}
the_senate <- data.frame(full_name,
political_party,
no_of_children)
View(the_senate)
View(the_senate)
#Import rvest
library(rvest)
#import dplyr
library(dplyr)
#import stringr
library(stringr)
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democratic, or Independent
str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent")
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democratic, or Independent
str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
the_senate$political_party <- str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)[1]
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
the_senate$political_party <- str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)[1]
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
the_senate$political_party <- str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)[, 1]
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)
#Create DF using the 3 vectors
the_senate <- data.frame(full_name,
political_party,
no_of_children)
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
str_extract_all(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)[, 1]
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
the_senate$political_party <- str_extract(the_senate$political_party, pattern = "Republican|Democrat|Independent", simplify = TRUE)
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
the_senate$political_party <- str_extract(the_senate$political_party, pattern = "Republican|Democrat|Independent")
View(the_senate)
View(the_senate)
#Create DF using the 3 vectors
the_senate <- data.frame(full_name,
political_party,
no_of_children)
#Clean up political_party
#Get rid of anything that doesn't say Republican, Democrat, or Independent
the_senate$political_party <- str_extract(the_senate$political_party, pattern = "Republican|Democratic|Independent")
#Clean up no_of_children
#Extract only first character - done this way for two reasons.
#1. I presume no US senator can deal with more than 10 children and the US Senate, but one entry (Sen. Debbie Stabenow) has the number of stepchildren
#stuck directly to the total number of children. I bet Sen. Debbie Stabenow does not have 21 children, but has 2 children, (not?) including one stepchild
# 2. Some entries have names, requiring characters rather than number filtering
the_senate$no_of_children <- str_extract(the_senate$no_of_children, pattern = "^.")
#Clean up no_of_children
#Extract only first character - done this way for two reasons.
#1. I presume no US senator can deal with more than 10 children and the US Senate, but one entry (Sen. Debbie Stabenow) has the number of stepchildren
#stuck directly to the total number of children. I bet Sen. Debbie Stabenow does not have 21 children, but has 2 children, (not?) including one stepchild
# 2. Some entries have names, requiring characters rather than number filtering
the_senate$no_of_children <- str_extract(the_senate$no_of_children, pattern = "^.")
#Replace those that had names with the number 1
the_senate$no_of_children <- str_replace(the_senate$no_of_children, pattern = "[[:alpha:]]", replacement = "1")
is.na(the_senate$no_of_children)
#Import rvest
library(rvest)
#import dplyr
library(dplyr)
#import stringr
library(stringr)
#import tidyr
library(tidyr)
#Clean up no_of_children
#Extract only first character - done this way for two reasons.
#1. I presume no US senator can deal with more than 10 children and the US Senate, but one entry (Sen. Debbie Stabenow) has the number of stepchildren
#stuck directly to the total number of children. I bet Sen. Debbie Stabenow does not have 21 children, but has 2 children, (not?) including one stepchild
# 2. Some entries have names, requiring characters rather than number filtering
the_senate$no_of_children <- str_extract(the_senate$no_of_children, pattern = "^.")
#Replace those that had names with the number 1
the_senate$no_of_children <- str_replace(the_senate$no_of_children, pattern = "[[:alpha:]]", replacement = "1")
#Replace NAs with 0
the_senate$no_of_children <- replace_na(the_senate$no_of_children, replace = 0)
str(the_senate)
#Create DF using the 3 vectors
the_senate <- data.frame(full_name,
political_party,
no_of_children)
#Clean up political_party
#Extract only Republican, Democrat, or Independent from political party
the_senate$political_party <- str_extract(the_senate$political_party, pattern = "Republican|Democratic|Independent")
#For Bernie, the only hybrid Democrat/Independent in this list as far as I can tell, the first match was chosen.
#Bernie is a democrat, since it was the first political affiliation listed for him. This is fine, since it's his current
#affiliation as a Democratic nominee for POTUS
#Change political_party to factor variable
the_senate$political_party <- as.factor(the_senate$political_party)
#Clean up no_of_children
#Extract only first character - done this way for two reasons.
#1. I presume no US senator can deal with more than 10 children and the US Senate, but one entry (Sen. Debbie Stabenow) has the number of stepchildren
#stuck directly to the total number of children. I bet Sen. Debbie Stabenow does not have 21 children, but has 2 children, (not?) including one stepchild
# 2. Some entries have names, requiring characters rather than number filtering
the_senate$no_of_children <- str_extract(the_senate$no_of_children, pattern = "^.")
#Replace those that had names with the number 1
the_senate$no_of_children <- str_replace(the_senate$no_of_children, pattern = "[[:alpha:]]", replacement = "1")
#Replace NAs with 0
the_senate$no_of_children <- replace_na(the_senate$no_of_children, replace = 0)
#Change no_of_children to numeric variable
the_senate$no_of_children <- as.numeric(the_senate$no_of_children)
str(the_senate)
#Summary Statistics
#Number of senators by political party
senate_party_division <- the_senate %>%
group_by(political_party) %>%
summarise("Number of Senators" = n())
senate_party_division
#Summary Statistics
#Number of senators by political party
senate_party_division <- the_senate %>%
group_by(political_party) %>%
summarise("Number of Senators" = n(),
"Mean number of children" = mean(no_of_children))
senate_party_division
#Summary Statistics
senate_summary_stats <- the_senate %>%
group_by(political_party) %>%
summarise("Number of Senators" = n(),
"Mean number of children" = mean(no_of_children)
)
senate_summary_stats
#Import rvest
library(rvest)
#import dplyr
library(dplyr)
#import stringr
library(stringr)
#import tidyr
library(tidyr)
#Read the wiki page
McConnell_wiki <- read_html("https://en.wikipedia.org/wiki/Mitch_McConnell")
knitr::include_graphics("images/wiki_infobox.png")
McConnell_infobox <- html_node(McConnell_wiki, css = ".infobox")
McConnell_table <- html_table(McConnell_infobox, header = FALSE)
colnames(McConnell_table) <- c("key", "value")
#Replace First line key with "Full Name"
McConnell_table$key[1] <- "Full Name"
#Filter only the rows we want
McConnell_table_clean <- filter(McConnell_table,
key %in% c("Full Name", "Political party", "Children")
)
#Print DF
McConnell_table_clean
knitr::include_graphics("images/dataframe_McConnell.png")
get_wiki_info <- function(url) {
#Read the wiki page
wiki_html <- read_html(url)
#Get just the infobox node
wiki_infobox <- html_node(wiki_html, css = ".infobox")
#Convert to DF
infobox_table <- html_table(wiki_infobox, header = FALSE)
#rename DF headers to key and value
colnames(infobox_table) <- c("key", "value")
#If statement to deal with no entry for children
if (!("Children" %in% infobox_table$key)) {
#Create children entry
children_entry <- list("key" = "Children",
"value" = NA)
#Add children entry to infobox_table
infobox_table <- rbind(infobox_table, children_entry)
}
#Replace First line key with "Full Name"
infobox_table$key[1] <- "Full Name"
#Filter only the rows we want
infobox_table_clean <- filter(infobox_table,
key %in% c("Full Name", "Political party", "Children")
)
#return the cleaned DF
infobox_table_clean
}
#Function call for Tammy Duckworth
get_wiki_info("https://en.wikipedia.org/wiki/Tammy_Duckworth")
#Function call for Susan Collins
#Function above has been amended to deal with no entry for children
get_wiki_info("https://en.wikipedia.org/wiki/Susan_Collins")
#Read the wiki page
USSenators_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
#Get HTML for the 'list of senators' box
list_US_Senators <- html_node(USSenators_wiki, xpath = "/html/body/div[3]/div[3]/div[4]/div/table[5]")
#Get the URL endpoints for each senator
list_US_senator_url_ends <- xml_find_all(list_US_Senators,
xpath = '//*[@id="senators"]/tbody//tr/th/span/span/span/a') %>%
xml_attr(., attr = "href")
#Get vector with the full URLs
US_Senator_wiki_pages <- paste("https://en.wikipedia.org", list_US_senator_url_ends,
sep = "")
#Define 3 empty vectors to store our senators' information
full_name <- vector(mode="character", length = 100)
political_party <- vector(mode="character", length = 100)
no_of_children <- vector(mode="character", length = 100)
#Loop to use get_wiki_info() on the list of US Senators and fill up our empty vectors
for (i in seq_along(US_Senator_wiki_pages)) {
#Get senator infobox
senator_infobox <- get_wiki_info(US_Senator_wiki_pages[i])
#Store Senator's full name in full_name vector
full_name[i] <- senator_infobox$value[[1]]
#Store Senator's political affiliation in political_party vector
political_party[i] <- senator_infobox$value[[2]]
#Store Senator's number of children in no_of_children vector
no_of_children[i] <- senator_infobox$value[[3]]
}
#Create DF using the 3 vectors
the_senate <- data.frame(full_name,
political_party,
no_of_children)
#Clean up political_party
#Extract only Republican, Democrat, or Independent from political party
the_senate$political_party <- str_extract(the_senate$political_party, pattern = "Republican|Democratic|Independent")
#For Bernie, the only hybrid Democrat/Independent in this list as far as I can tell, the first match was chosen.
#Bernie is a democrat, since it was the first political affiliation listed for him. This is fine, since it's his current
#affiliation as a Democratic nominee for POTUS
#Change political_party to factor variable
the_senate$political_party <- as.factor(the_senate$political_party)
#Clean up no_of_children
#Extract only first character - done this way for two reasons.
#1. I presume no US senator can deal with more than 10 children and the US Senate, but one entry (Sen. Debbie Stabenow) has the number of stepchildren
#stuck directly to the total number of children. I bet Sen. Debbie Stabenow does not have 21 children, but has 2 children, (not?) including one stepchild
# 2. Some entries have names, requiring characters rather than number filtering
the_senate$no_of_children <- str_extract(the_senate$no_of_children, pattern = "^.")
#Replace those that had names with the number 1
the_senate$no_of_children <- str_replace(the_senate$no_of_children, pattern = "[[:alpha:]]", replacement = "1")
#Replace NAs with 0
the_senate$no_of_children <- replace_na(the_senate$no_of_children, replace = 0)
#Change no_of_children to numeric variable
the_senate$no_of_children <- as.numeric(the_senate$no_of_children)
#Summary Statistics
senate_summary_stats <- the_senate %>%
group_by(political_party) %>%
summarise("Number of Senators" = n(),
"Mean number of children" = mean(no_of_children)
)
senate_summary_stats
